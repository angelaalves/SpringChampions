package com.academyproject.championsacademyleague.accesingdatamysql;

import com.academyproject.championsacademyleague.services.EmailSenders;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Random;

@Controller // This means that this class is a Controller
@RequestMapping(path="/players") // This means URL's start with /players (after Application path)
public class mainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private playerRepository playerRepository;

    PasswordEncoder passwordEncoder(){return new BCryptPasswordEncoder();}

    @PostMapping(path="/add")// Map ONLY POST Requests
    public @ResponseBody String addNewPlayer(@RequestParam String name, @RequestParam String email, @RequestParam String gender, @RequestParam String usertype){
        String randomPass="";
        Random randomizer=new Random();
        for(int i=0; i<10;i++){
            int j=(randomizer.nextInt(10));
            randomPass=randomPass+(String.valueOf(randomizer.nextInt(10)));
        }
        player player = new player();
        player.setUsername(name);
        player.setEmail(email);
        player.setPassword(passwordEncoder().encode(randomPass));
        player.setGender(gender);
        player.setUsertype(usertype);

        if(usertype.equals("warrior")){
            player.setXp(0);
            player.setChampiesToGive(20);
            player.setMyChampies(0);
            player.setStatus("Active");
        }else{
            player.setXp(1000);
            player.setChampiesToGive(10000);
            player.setMyChampies(10000);
            player.setStatus("Active");
        }
        EmailSenders sender=new EmailSenders();
        sender.sendEmail(email, randomPass);
        playerRepository.save(player);
        return "player created";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<player> getAllUsers() {
        // This returns a JSON or XML with the players
        return playerRepository.findAll();
    }
}